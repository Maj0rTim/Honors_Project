public native int ftok (String pathname, char proj);
    
    /** Create a new message queue.  See the man page for <CODE>msgget()</CODE>
      * for more details.
      * @param key An identifier to be used for this queue.
      * @param flags The flags to be used for this queue (IPC_CREAT or
      * IPC_EXCL).
      */
    public native int msgget (int key, int flags);
    
    /** Send a message using a message queue.  See the man page for
      * <CODE>msgsnd()</CODE> for more details.
      * @param msgqid The message queue identifier (obtained from
      * <CODE>msgget()</CODE>).
      * @param type The message type.
      * @param buffer the java.nio ByteBuffer where the message will be copied from.
      * @param length The size of the message.  Only this number of bytes from
      * msg will be sent.  If the size is negative, all of msg will be sent.
      * @param flags The flags to be used for this queue (IPC_NOWAIT).
      * @returns 
      */
    public native int msgsnd (int msgqid, int type, ByteBuffer buffer, int length, int flags);
    
    
    /** Receive a message using a message queue.  See the man page for
      * <CODE>msgrcv()</CODE> for more details.
      * @param msgqid The message queue identifier (obtained from
      * <CODE>msgget()</CODE>).
      * @param type The message type. If type is 0, the first message on the
      * queue is received. If type is greater than 0, the first message of
      * type type is received. If type is less than 0, the first message
      * of the lowest type that is less than or equal to the absolute value
      * of type is received. 
      * @param buffer the java.nio ByteBuffer where the message will be copied to.
      * @param length The size of the message.  The received message is
      * truncated to msgsz bytes if it is larger than msgsz and
      * (msgflg & MSG_NOERROR) is non-zero. The truncated part of the message
      * is lost, and no indication of the truncation is given to the calling
      * process.
      * @param flags The flags to be used for this queue (IPC_NOWAIT, or
      *   MSG_NOERROR).
      * @returns If successful, the number of bytes actually placed into msg.
      *   On failure, -1 (errnum has the Linux error code).
      */
    public native int msgrcv (int msgqid, int type, ByteBuffer buffer, int length, int flags);

    /** Remove an IPC message queue.  See the man page for
      * <CODE>msgctl()</CODE> for more details.
      * @param msgqid The message queue identifier (obtained from
      * <CODE>msgget()</CODE>).
      * @returns If successful, 0.
      *   On failure, -1 (errnum has the Linux error code).
      */
    public native int msgRmid (int msgqid);